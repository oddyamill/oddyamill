---
import Warp from '@components/Warp.astro'
import Layout from '@layouts/Layout.astro'
import Text from '@components/Text.astro'

export { getStaticPaths } from '@intl'

export const prerender = false

type Location = {
  iata: string
  cca2: string
  region: string
  city: string
}

async function getLocation(): Promise<Location | undefined> {
  const response = await fetch('https://speed.cloudflare.com/locations', {
    cf: {
      cacheTtl: 604800,
      cacheEverything: true,
    },
  })

  if (!response.ok) {
    return undefined
  }

  const locations = (await response.json()) as Location[]
  return locations.find((location) => location.iata === cf.colo)
}

async function getColo(): Promise<string | undefined> {
  const location = await getLocation()

  return (
    location &&
    ` (${location.city}, ${new Intl.DisplayNames('en', { type: 'region' }).of(location.cca2)})`
  )
}

function getIp(): string {
  return (
    Astro.request.headers.get('x-real-ip') ??
    Astro.request.headers.get('cf-connecting-ip')!
  )
}

const continents: Record<ContinentCode, string> = {
  AF: 'Africa',
  AN: 'Antarctica',
  AS: 'Asia',
  EU: 'Europe',
  NA: 'North America',
  OC: 'Oceania',
  SA: 'South America',
}

function getContinent(): string {
  return continents[cf.continent as ContinentCode] ?? cf.continent ?? 'Unknown'
}

const cf = Astro.locals.runtime.cf!
const isWarp = cf.asOrganization === 'Cloudflare Warp'
---

<Layout title="request.title" description="request.description" allowInlineScripts={isWarp}>
  <h1><Text key="request.message"></h1>
  <p><Text key="request.ip"/>: {getIp()}</p>
  <p><Text key="request.city"/>: {cf.city ?? '???'}</p>
  <p><Text key="request.country"/>: {cf.country}</p>
  <p><Text key="request.timezone"/>: {cf.timezone}</p>
  <p><Text key="request.protocol"/>: {cf.httpProtocol}</p>
  <p><Text key="request.continent"/>: {getContinent()}</p>
  <p><Text key="request.asn"/>: {cf.asn}</p>
  <p><Text key="request.organization"/>: {cf.asOrganization}</p>
  <p><Text key="request.colo"/>: {[cf.colo, getColo()]}</p>
  {isWarp && <Warp />}
</Layout>

