---
import Warp from '@components/warp.astro'
import Layout from '@layouts/Layout.astro'
export const prerender = false

type Location = {
  iata: string
  cca2: string
  region: string
  city: string
}

async function getLocation(): Promise<Location | undefined> {
  const response = await fetch('https://speed.cloudflare.com/locations', {
    cf: {
      cacheTtl: 604800,
      cacheEverything: true,
    },
  })

  if (!response.ok) {
    return undefined
  }

  const locations = (await response.json()) as Location[]
  return locations.find((location) => location.iata === cf.colo)
}

async function getColo(): Promise<string | undefined> {
  const location = await getLocation()

  return (
    location &&
    ` (${location.city}, ${new Intl.DisplayNames('en', { type: 'region' }).of(location.cca2)})`
  )
}

function getIp(): string {
  return (
    Astro.request.headers.get('x-real-ip') ??
    Astro.request.headers.get('cf-connecting-ip')!
  )
}

const continents: Record<ContinentCode, string> = {
  AF: 'Africa',
  AN: 'Antarctica',
  AS: 'Asia',
  EU: 'Europe',
  NA: 'North America',
  OC: 'Oceania',
  SA: 'South America',
}

function getContinent(): string {
  return continents[cf.continent as ContinentCode] ?? cf.continent ?? 'Unknown'
}

const cf = Astro.locals.runtime.cf!
---

<Layout title="пробиватор" description="выключите впн">
  <h1>привет</h1>
  <p>твой ip: {getIp()}</p>
  <p>твой город: {cf.city ?? 'говноедск'}</p>
  <p>твоя страна: {cf.country}</p>
  <p>твой часовой пояс: {cf.timezone}</p>
  <p>твой протокол: {cf.httpProtocol}</p>
  <p>твой континент: {getContinent()}</p>
  <p>твой asn: {cf.asn}</p>
  <p>твоя организация: {cf.asOrganization}</p>
  <p>твой центр обработки данных: {[cf.colo, getColo()]}</p>
  {cf.asOrganization === 'Cloudflare Warp' && <Warp />}
</Layout>
