---
import Layout from '@layouts/Layout.astro'

type Cf = {
  city: string
  country: string
  timezone: string
  latitude: string
  longitude: string
  httpProtocol: string
  continent: string
  asn: number
  asOrganization: string
  colo: string
}

function getRequest(): [string, Cf] {
  return [
    Astro.request.headers.get('cf-connecting-ip') as string,
    Astro.locals.runtime.cf as Cf,
  ]
}

function getGoogleMapsLink(cf: Cf): string {
  return `https://www.google.com/maps/place/@${cf.latitude},${cf.longitude}/`
}

const [ip, cf] = getRequest()

export const prerender = false
---

<Layout title="пробиватор" description="выключите впн">
  <h1>привет</h1>
  <p>твой ip: {ip}</p>
  <p>твой город: {cf.city ?? 'говноедск'}</p>
  <p>твоя страна: {cf.country}</p>
  <p>твой часовой пояс: {cf.timezone}</p>
  <p>твой протокол: {cf.httpProtocol}</p>
  <p>твой континент: {cf.continent}</p>
  <p>твой asn: {cf.asn}</p>
  <p>твоя организация: {cf.asOrganization}</p>
  <p>твой центр обработки данных: <a>{cf.colo}</a></p>
  <a href={getGoogleMapsLink(cf)}>google maps</a>
</Layout>

<script>
  type StatusComponent = {
    name: string
  }

  type StatusResponse = {
    components: StatusComponent[]
  }

  async function getColo(colo: string): Promise<void> {
    const response = await fetch(
      'https://www.cloudflarestatus.com/api/v2/components.json',
    )

    if (!response.ok) {
      throw new Error('Network response was not ok')
    }

    const data = (await response.json()) as StatusResponse
    alert(
      data.components
        .find((component) => component.name.endsWith(`(${colo})`))
        ?.name.slice(0, -8) ?? colo,
    )
  }

  document.addEventListener('astro:page-load', () => {
    document
      .querySelector<HTMLAnchorElement>('p a')!
      .addEventListener('click', (event: MouseEvent) => {
        getColo((event.target as HTMLAnchorElement).textContent!)
      })
  })
</script>
